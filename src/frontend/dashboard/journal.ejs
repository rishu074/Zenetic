<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zenetic - Journal</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        }

        body {
            background-color: #0f172a;
            color: #e2e8f0;
            min-height: 100vh;
        }

        .main-content {
            padding: 6rem 2rem 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 600;
            color: #f8fafc;
        }

        .filters-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .search-input {
            flex: 1;
            min-width: 200px;
            padding: 0.75rem 1rem;
            background-color: #1e293b;
            border: 1px solid #334155;
            border-radius: 0.5rem;
            color: #f8fafc;
            font-size: 1rem;
        }

        .search-input:focus {
            outline: none;
            border-color: #60a5fa;
        }

        .filter-select {
            padding: 0.75rem 1rem;
            background-color: #1e293b;
            border: 1px solid #334155;
            border-radius: 0.5rem;
            color: #f8fafc;
            font-size: 1rem;
            cursor: pointer;
        }

        .filter-select:focus {
            outline: none;
            border-color: #60a5fa;
        }

        .filter-select option {
            background-color: #1e293b;
            color: #f8fafc;
        }

        .date-input {
            padding: 0.75rem 1rem;
            background-color: #1e293b;
            border: 1px solid #334155;
            border-radius: 0.5rem;
            color: #f8fafc;
            font-size: 1rem;
        }

        .date-input::-webkit-calendar-picker-indicator {
            filter: invert(1);
            cursor: pointer;
        }

        .journals-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .journal-card {
            background-color: #1e293b;
            border-radius: 0.75rem;
            padding: 1.5rem;
            transition: transform 0.2s;
            cursor: pointer;
        }

        .journal-card:hover {
            transform: translateY(-2px);
        }

        .journal-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .journal-date {
            font-size: 0.875rem;
            color: #94a3b8;
        }

        .journal-special {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            background-color: #334155;
            border-radius: 1rem;
            color: #94a3b8;
        }

        .journal-content {
            color: #cbd5e1;
            line-height: 1.5;
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 2rem;
        }

        .page-btn {
            padding: 0.5rem 1rem;
            background-color: #1e293b;
            border: 1px solid #334155;
            border-radius: 0.375rem;
            color: #f8fafc;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .page-btn:hover:not(.active) {
            background-color: #334155;
        }

        .page-btn.active {
            background-color: #3b82f6;
            border-color: #3b82f6;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #94a3b8;
        }

        .limit-select {
            padding: 0.75rem 1rem;
            background-color: #1e293b;
            border: 1px solid #334155;
            border-radius: 0.5rem;
            color: #f8fafc;
            font-size: 1rem;
            cursor: pointer;
            min-width: 100px;
        }

        .limit-select:focus {
            outline: none;
            border-color: #60a5fa;
        }

        .limit-select option {
            background-color: #1e293b;
            color: #f8fafc;
        }

        .pagination-info {
            text-align: center;
            color: #94a3b8;
            margin-bottom: 1rem;
            font-size: 0.875rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.75);
            z-index: 2000;
            overflow-y: auto;
        }

        .modal-content {
            background-color: #1e293b;
            margin: 2rem auto;
            padding: 2rem;
            border-radius: 1rem;
            max-width: 800px;
            width: 90%;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.5rem;
        }

        .modal-meta {
            flex: 1;
        }

        .modal-date {
            font-size: 0.875rem;
            color: #94a3b8;
            margin-bottom: 0.5rem;
        }

        .modal-special {
            display: inline-block;
            font-size: 0.75rem;
            padding: 0.25rem 0.75rem;
            background-color: #334155;
            border-radius: 1rem;
            color: #94a3b8;
        }

        .modal-close {
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            padding: 0.5rem;
            margin: -0.5rem;
            font-size: 1.5rem;
            line-height: 1;
        }

        .modal-close:hover {
            color: #f8fafc;
        }

        .modal-body {
            color: #e2e8f0;
            line-height: 1.75;
            white-space: pre-wrap;
        }

        @media (max-width: 768px) {
            .main-content {
                padding: 5rem 1rem 1rem;
            }

            .page-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            .filters-container {
                flex-direction: column;
            }

            .journals-grid {
                grid-template-columns: 1fr;
            }

            .modal-content {
                margin: 1rem;
                width: auto;
            }
        }
    </style>
</head>
<body>
    <%- include('navbar') %>
    
    <main class="main-content">
        <div class="page-header">
            <h1 class="page-title">Journal</h1>
        </div>

        <div class="filters-container">
            <input type="text" class="search-input" placeholder="Search journals..." id="searchInput">
            <input type="date" class="date-input" id="dateFilter">
            <select class="limit-select" id="limitSelect">
                <option value="10">10 per page</option>
                <option value="25" selected>25 per page</option>
                <option value="50">50 per page</option>
                <option value="100">100 per page</option>
            </select>
        </div>

        <div class="journals-grid" id="journalsGrid">
            <!-- Journals will be loaded here -->
        </div>

        <div class="pagination-info" id="paginationInfo">
            <!-- Pagination info will be shown here -->
        </div>

        <div class="pagination" id="pagination">
            <!-- Pagination will be generated here -->
        </div>
    </main>

    <div id="journalModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-meta">
                    <div class="modal-date" id="modalDate"></div>
                    <div class="modal-special" id="modalSpecial"></div>
                </div>
                <button class="modal-close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body" id="modalContent"></div>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let searchTerm = '';
        let dateFilter = '';
        let limit = 25;
        let totalDocs = 0;

        async function fetchJournals(page = 1) {
            try {
                const filters = {};
                
                // Add search term to look for content
                if (searchTerm) {
                    filters.content = { $regex: searchTerm, $options: 'i' };
                }

                // Handle date filter to match MongoDB ISO date
                if (dateFilter) {
                    const selectedDate = new Date(dateFilter);
                    const nextDay = new Date(selectedDate);
                    nextDay.setDate(nextDay.getDate() + 1);
                    
                    filters.date = {
                        $gte: selectedDate.toISOString(),
                        $lt: nextDay.toISOString()
                    };
                }

                const response = await fetch(`/api/journals?filters=${JSON.stringify(filters)}&limit=${limit}&page=${page}`);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || 'Failed to fetch journals');
                }

                totalDocs = data.data.total;
                return data;
            } catch (error) {
                console.error('Error fetching journals:', error);
                return null;
            }
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function truncateContent(content, length = 50) {
            if (!content) return '';
            return content.length > length ? content.substring(0, length) + '...' : content;
        }

        function renderJournals(journals) {
            const grid = document.getElementById('journalsGrid');
            grid.innerHTML = '';

            if (!journals || journals.length === 0) {
                grid.innerHTML = '<div class="loading">No journals found</div>';
                return;
            }

            journals.forEach(journal => {
                const card = document.createElement('div');
                card.className = 'journal-card';
                card.innerHTML = `
                    <div class="journal-meta">
                        <div class="journal-date">${formatDate(journal.date)}</div>
                        <div class="journal-special">${journal.special || 'normal'}</div>
                    </div>
                    <p class="journal-content">${truncateContent(journal.content)}</p>
                `;
                card.onclick = () => showJournal(journal);
                grid.appendChild(card);
            });
        }

        function updatePaginationInfo() {
            const startItem = (currentPage - 1) * limit + 1;
            const endItem = Math.min(currentPage * limit, totalDocs);
            const info = document.getElementById('paginationInfo');
            info.textContent = `Showing ${startItem}-${endItem} of ${totalDocs} journals`;
        }

        function renderPagination(totalPages) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Previous button
            if (currentPage > 1) {
                const prevBtn = document.createElement('button');
                prevBtn.className = 'page-btn';
                prevBtn.textContent = 'Previous';
                prevBtn.onclick = () => loadPage(currentPage - 1);
                pagination.appendChild(prevBtn);
            }

            // Calculate page range to show
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            
            // Adjust start if we're near the end
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            // First page and ellipsis
            if (startPage > 1) {
                const firstBtn = document.createElement('button');
                firstBtn.className = 'page-btn';
                firstBtn.textContent = '1';
                firstBtn.onclick = () => loadPage(1);
                pagination.appendChild(firstBtn);

                if (startPage > 2) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'page-btn';
                    ellipsis.textContent = '...';
                    ellipsis.style.cursor = 'default';
                    pagination.appendChild(ellipsis);
                }
            }

            // Page numbers
            for (let i = startPage; i <= endPage; i++) {
                const pageBtn = document.createElement('button');
                pageBtn.className = `page-btn ${i === currentPage ? 'active' : ''}`;
                pageBtn.textContent = i;
                pageBtn.onclick = () => loadPage(i);
                pagination.appendChild(pageBtn);
            }

            // Last page and ellipsis
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'page-btn';
                    ellipsis.textContent = '...';
                    ellipsis.style.cursor = 'default';
                    pagination.appendChild(ellipsis);
                }

                const lastBtn = document.createElement('button');
                lastBtn.className = 'page-btn';
                lastBtn.textContent = totalPages;
                lastBtn.onclick = () => loadPage(totalPages);
                pagination.appendChild(lastBtn);
            }

            // Next button
            if (currentPage < totalPages) {
                const nextBtn = document.createElement('button');
                nextBtn.className = 'page-btn';
                nextBtn.textContent = 'Next';
                nextBtn.onclick = () => loadPage(currentPage + 1);
                pagination.appendChild(nextBtn);
            }

            updatePaginationInfo();
        }

        async function loadPage(page) {
            currentPage = page;
            const journalsGrid = document.getElementById('journalsGrid');
            journalsGrid.innerHTML = '<div class="loading">Loading journals...</div>';

            const data = await fetchJournals(page);
            if (data) {
                renderJournals(data.data.journals);
                const totalPages = Math.ceil(data.data.total / limit);
                renderPagination(totalPages);
            }
        }

        // Search and filter functionality
        const searchInput = document.getElementById('searchInput');
        const dateFilterInput = document.getElementById('dateFilter');
        const limitSelect = document.getElementById('limitSelect');
        let searchTimeout;

        searchInput.addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                searchTerm = e.target.value;
                currentPage = 1;
                loadPage(1);
            }, 500);
        });

        dateFilterInput.addEventListener('change', (e) => {
            dateFilter = e.target.value;
            currentPage = 1;
            loadPage(1);
        });

        limitSelect.addEventListener('change', (e) => {
            limit = parseInt(e.target.value);
            currentPage = 1;
            loadPage(1);
        });

        // Initial load
        loadPage(1);

        function showJournal(journal) {
            const modal = document.getElementById('journalModal');
            const modalDate = document.getElementById('modalDate');
            const modalSpecial = document.getElementById('modalSpecial');
            const modalContent = document.getElementById('modalContent');

            modalDate.textContent = formatDate(journal.date);
            modalSpecial.textContent = journal.special || 'normal';
            modalContent.textContent = journal.content;

            modal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeModal() {
            const modal = document.getElementById('journalModal');
            modal.style.display = 'none';
            document.body.style.overflow = '';
        }

        // Close modal when clicking outside
        document.getElementById('journalModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                closeModal();
            }
        });

        // Close modal on escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeModal();
            }
        });
    </script>
</body>
</html> 